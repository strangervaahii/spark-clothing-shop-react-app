{"version":3,"file":"static/js/343.b309dd44.chunk.js","mappings":"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","sources":["components/HelmetSetup/HelmetSetup.js","pages/ContactUsPage/ContactAddress/ContactAddress.js","pages/ContactUsPage/GetInTouch/GetInTouch.js","pages/ContactUsPage/ContactUsPage.js","utils/fetchApi.js"],"sourcesContent":["// Import React, PropTypes, Helmet and helmet provider\r\nimport React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\n// Define the Helmet Setup\r\nconst HelmetSetup = ({ title }) => {\r\n  return (\r\n    // Defining the HelmetProvider\r\n    <HelmetProvider >\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n    </HelmetProvider>\r\n  );\r\n}\r\n// proptypes of the title\r\nHelmetSetup.propTypes = {\r\n  title: Proptypes.string\r\n};\r\n\r\n// Export the HelmetSetup component\r\nexport default HelmetSetup;\r\n","// import React and components required for the ContactAddress component\r\nimport React, { useEffect, useState } from 'react';\r\nimport { fetchApi } from '../../../utils/fetchApi';\r\n\r\nconst ContactAddress = () => {\r\n  // Set up state to hold contact data and error status\r\n  const [contactData, setContactData] = useState([]);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  // Fetch contact data on component mount using useEffect hook\r\n  useEffect(() => {\r\n    fetchApi('http://localhost:5000/contactData', { ContactAddress })\r\n      .then((resInJson) => {\r\n        // If the response is not a 404 error, set the contact data and clear the error\r\n        if (resInJson.status !== 404) {\r\n          setContactData(resInJson);\r\n          setIsError(false);\r\n        } else { // Otherwise, clear the contact data and set the error status\r\n          setContactData([]);\r\n          setIsError(true);\r\n        }\r\n      })\r\n      .catch((err) => { // Handle any errors with fetching the data\r\n        console.log(err);\r\n        setContactData([]);\r\n        setIsError(true);\r\n      })\r\n  }, []);\r\n\r\n  // If there is an error, display an error message\r\n  if (isError) {\r\n    return (\r\n      <div className='alert aler-danger'>\r\n        Sorry! Unable to fetch contact address ! Try Again Later\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Otherwise, display the contact data\r\n  return (\r\n    <div className=\"col-md-6\">\r\n      <h2 className='fs-1 mb-4'>Contact Us</h2>\r\n      <p className=\"mb-5\">This page should provide clear and concise information on how customers can reach out to the business via email, phone, or live chat. The page should also have a contact form that customers can fill out to submit their queries directly to the business.</p>\r\n      {contactData.map(({ id, address, phone, email }) => (\r\n        <ul className=\"list-unstyled pl-md-5 mb-5\" key={id}>\r\n          <li className=\"d-flex text-black mb-2\">\r\n            <span className=\"mx-3\"><span className=\"fa-solid fa-map\"></span></span>{address}\r\n          </li>\r\n          <li className=\"d-flex text-black mb-2\"><span className=\"mx-3\"><span className=\"fa-solid fa-phone\"></span></span>{phone[0]}, {phone[1]}</li>\r\n          <li className=\"d-flex text-black\"><span className=\"mx-3\"><span className=\"fa-regular fa-envelope\"></span></span>{email}</li>\r\n        </ul>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// export the ContactAddress component\r\nexport default ContactAddress;\r\n","// Importing necessary dependencies for the component\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport * as Yup from 'yup'; // for form validation\r\nimport { useFormik } from 'formik'; // for handling form submission and validation\r\n\r\n// Creating a functional component called GetInTouch\r\nconst GetInTouch = () => {\r\n  // Defining and initializing state variables using the useState hook\r\n  const [isSaved, setIsSaved] = useState(false); // to indicate whether the form data has been saved or not\r\n  const [isPending, setIsPending] = useState(false); // to indicate whether the form submission is pending or not\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  // Defining and initializing the initial values for the form\r\n  const initialValues = {\r\n    name: '',\r\n    email: '',\r\n    message: ''\r\n  };\r\n\r\n  // Defining the onSubmit function that will be called when the form is submitted\r\n  const onSubmit = (values, { resetForm }) => {\r\n    // Making an HTTP POST request to save the form data\r\n    axios\r\n      .post('http://localhost:5000/getInTouchData', values)\r\n      .then((resInJson) => {\r\n        // If the form data was saved successfully, update the state variables accordingly\r\n        if (resInJson.status !== 404) {\r\n          setIsSaved(false);\r\n          setIsPending(true);\r\n        } else {\r\n          // If there was an error while saving the form data\r\n          setIsPending(false);\r\n          setIsSaved(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // If there was an error while making the HTTP request, update the state variables accordingly\r\n        console.log(err);\r\n        setIsError(true);\r\n        setIsPending(false);\r\n        setIsSaved(false);\r\n      });\r\n\r\n    // Resetting the form values to empty after the form has been submitted\r\n    resetForm({ values: '' });\r\n  };\r\n\r\n  // Defining the form validation schema using Yup\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string().required('Required!'),\r\n    email: Yup.string().email('Invalid email format').required('Required!'),\r\n    message: Yup.string().required('Required!')\r\n  });\r\n\r\n  // Creating an instance of the useFormik hook to handle form submission and validation\r\n  const formik = useFormik({\r\n    initialValues, // initial values for the form\r\n    onSubmit, // onSubmit function to be called when the form is submitted\r\n    validationSchema // validation schema for the form\r\n  });\r\n\r\n  // Rendering the UI for the component\r\n  return (\r\n    <>\r\n      <div className='col-md-6'>\r\n        {/* title for get in touch  */}\r\n        <h4 className='mb-2'>Get In Touch</h4>\r\n        <form className='mb-5' method='post' id='contactForm' name='contactForm' onSubmit={formik.handleSubmit}>\r\n          <div className='row'>\r\n            <div className='col-md-12 form-group'>\r\n              {/* label for the name input tag */}\r\n              <label htmlFor='nameInput' className='col-form-label' data-testid=\"nameLabel\">Name</label>\r\n              <input\r\n                type='text'\r\n                name='name'\r\n                className='form-control'\r\n                data-testid='nameInput'\r\n                placeholder='Enter Your Name'\r\n                id='nameInput'\r\n                value={formik.values.name}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.touched.name && formik.errors.name && (\r\n                <span className='text-danger'>{formik.errors.name}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className='row'>\r\n            <div className='col-md-12 form-group'>\r\n              {/* label for the email input tag */}\r\n              <label htmlFor='emailInput' className='col-form-label' data-testid=\"emailLabel\">Email</label>\r\n              <input\r\n                type='email'\r\n                className='form-control'\r\n                name='email'\r\n                placeholder='Enter Your Email'\r\n                id='emailInput'\r\n                data-testid=\"emailInput\"\r\n                value={formik.values.email}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.touched.email && formik.errors.email && (\r\n                <span className='text-danger'>{formik.errors.email}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className='row'>\r\n            <div className='col-md-12 form-group mb-3'>\r\n              {/* label for the message input tag */}\r\n              <label htmlFor='messageInput' className='col-form-label'>Message</label>\r\n              <textarea\r\n                className='form-control'\r\n                name='message'\r\n                id='messageInput'\r\n                placeholder='Enter Your Message'\r\n                data-testid=\"messageArea\"\r\n                cols='30'\r\n                rows='7'\r\n                value={formik.values.message}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}>\r\n              </textarea>\r\n              {formik.touched.message && formik.errors.message && (\r\n                <span className='text-danger'>{formik.errors.message}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className='row'>\r\n            <div className='col-md-12'>\r\n              {/* Submit functionality */}\r\n              {!isSaved && (\r\n                <button type='submit' className='btn btn-primary' disabled={formik.values.name === ''} data-testid='submitButton'>\r\n                  Submit\r\n                </button>\r\n              )}\r\n              {isSaved && (\r\n                <button type='submit' className='btn btn-info'>Uploading...</button>\r\n              )}\r\n            </div>\r\n            {isPending ? (\r\n              <div className='alert alert-success mt-2 px-4' data-testid=\"isPending\">\r\n                Saved Successfully\r\n              </div>\r\n            ) : ('')}\r\n            {isError ? (\r\n              <div className='alert alert-danger mt-2 px-4'>Some Error Occurred. Try again later!</div>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        </form >\r\n      </div >\r\n    </>\r\n  )\r\n}\r\n\r\n// export the GetInTouch component\r\nexport default GetInTouch;\r\n","// import React and components required for the ContactUsPage component\r\nimport React from 'react';\r\nimport HelmetSetup from '../../components/HelmetSetup/HelmetSetup';\r\nimport ContactAddress from './ContactAddress/ContactAddress';\r\nimport GetInTouch from './GetInTouch/GetInTouch';\r\n\r\n// define the ContactUsPage component\r\nconst ContactUsPage = () => {\r\n  // return the component's JSX\r\n  return (\r\n    <>\r\n      {/* Set the page title using the HelmetSetup component */}\r\n      <HelmetSetup title='ContactUsPage' />\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          {/* Render the ContactAddress component */}\r\n          <ContactAddress data-testid='contactAddress' />\r\n          {/* Render the GetInTouch component */}\r\n          <GetInTouch data-testid='getInTouch' />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n// export the ContactUsPage component\r\nexport default ContactUsPage;\r\n","// This function makes a GET request to the specified URL and returns a promise\r\nexport const fetchApi = (url) => {\r\n  return fetch(url)\r\n    .then((res) => {\r\n      // which resolves with the JSON response if successful, or with an error object\r\n      if (res.status === 200 || res.status === 201) {\r\n        return res.json()\r\n      } else {\r\n        return {\r\n          // containing the response status and an error message if unsuccessful.\r\n          status: res.status,\r\n          error: new Error('Invalid Response')\r\n        };\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      // It also logs the response or error to the console.\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      // console.log('It is over!');\r\n    });\r\n};\r\n"],"names":["_ref","title","_jsx","HelmetProvider","children","Helmet","ContactAddress","_useState","useState","_useState2","_slicedToArray","contactData","setContactData","_useState3","_useState4","isError","setIsError","useEffect","fetchApi","then","resInJson","status","catch","err","console","log","className","_jsxs","map","id","address","phone","email","isSaved","setIsSaved","isPending","setIsPending","_useState5","_useState6","validationSchema","Yup","name","required","message","formik","useFormik","initialValues","onSubmit","values","resetForm","axios","_Fragment","method","handleSubmit","htmlFor","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","touched","errors","cols","rows","disabled","HelmetSetup","GetInTouch","url","fetch","res","json","error","Error","finally"],"sourceRoot":""}