{"version":3,"file":"static/js/92.46088845.chunk.js","mappings":"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","sources":["components/HelmetSetup/HelmetSetup.js","pages/ProductsPage/ProductDetail/Review/Review.js","pages/ProductsPage/ProductDetail/Comments/Comments.js","pages/ProductsPage/ProductDetail/ProductDetail.js","utils/fetchApi.js"],"sourcesContent":["// Import React, PropTypes, Helmet and helmet provider\r\nimport React from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\n\r\n// Define the Helmet Setup\r\nconst HelmetSetup = ({ title }) => {\r\n  return (\r\n    // Defining the HelmetProvider\r\n    <HelmetProvider >\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n    </HelmetProvider>\r\n  );\r\n}\r\n// proptypes of the title\r\nHelmetSetup.propTypes = {\r\n  title: Proptypes.string\r\n};\r\n\r\n// Export the HelmetSetup component\r\nexport default HelmetSetup;\r\n","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport Proptypes from 'prop-types';\r\n\r\nconst Review = ({ product, setProductDetail }) => {\r\n  // Define the initial values for the form fields\r\n  const initialValues = {\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    message: '',\r\n    rating: ''\r\n  };\r\n\r\n  // Define state variables to check if the data is saved and if the form is pending submission\r\n  const [isSaved, setIsSaved] = useState(false);\r\n  const [isPending, setIsPending] = useState(false);\r\n  // Define state variable to toggle the display of a modal\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Define functions to handle modal display\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  // Define the submit function that sends form data to a server and resets the form\r\n  const onSubmit = async (values, { resetForm }) => {\r\n    // Check if the email is already taken\r\n    const formData = {\r\n      id: Math.floor(Math.random() * 10000),\r\n      name: values.name,\r\n      email: values.email,\r\n      message: values.message,\r\n      phone: values.phone,\r\n      rating: values.rating\r\n    }\r\n    const updatedProduct = { ...product, reviews: [...product.reviews, formData] }\r\n    axios.put(`http://localhost:5000/products/${product.id}`, updatedProduct)\r\n      .then((resInJson) => {\r\n        // fetch data and passing throught the setContactData\r\n        if (resInJson.status !== 404) {\r\n          setProductDetail(updatedProduct);\r\n          setIsSaved(false);\r\n          setIsPending(true);\r\n        } else {\r\n          // if the 404 error caught then display nothing\r\n          alert('error');\r\n          setIsPending(false);\r\n          setIsSaved(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        alert('something went wrong try again!!!');\r\n        console.log(err);\r\n        setIsPending(false);\r\n        setIsSaved(false);\r\n      });\r\n    // Reset the form after submission\r\n    resetForm({ values: '' });\r\n  };\r\n\r\n  // Define a validation schema for the form fields\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string().required('User Name is Required!!!!'),\r\n    email: Yup.string().email('Invalid email format').required('email id is Required!!!!'),\r\n    phone: Yup.number().required('A phone number is required'),\r\n    message: Yup.string().required('Required!!!'),\r\n    rating: Yup.string().required('Required')\r\n  });\r\n\r\n  // Use the useFormik hook to create a formik object with the above defined properties\r\n  const formik = useFormik({\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Button variant='primary' onClick={handleShow}>Write a Review</Button>\r\n      <Modal size='lg'\r\n        aria-labelledby='contained-modal-title-vcenter' centered\r\n        show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          {/* <Modal.Title>Review</Modal.Title> */}\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className='p-5'>\r\n            {/* justify is to have the box in center  */}\r\n            <div className='col d-flex justify-content-center pb-5'>\r\n              <div className='card w-100 contact-box'>\r\n                <h3 className='p-3 bg-primary text-white'>\r\n                  Review\r\n                </h3>\r\n                <form className='p-3' onSubmit={formik.handleSubmit}>\r\n                  <div className='mb-3'>\r\n                    {/* htmlFor and the id should be same */}\r\n                    {/* in input must have name  */}\r\n                    {/* so the data will be collect in the name and submit to backend  */}\r\n                    <label\r\n                      // name field\r\n                      htmlFor='name'\r\n                      className='form-label'\r\n                      data-testid='nameLabel'\r\n                    >\r\n                      Enter Your Name\r\n                    </label>\r\n                    {/* onChange is a event because changes will be updated while changing the input field */}\r\n                    {/* must have a name while form submission the data will be pass to db  */}\r\n                    <input\r\n                      type='text'\r\n                      name='name'\r\n                      className='form-control'\r\n                      id='name'\r\n                      placeholder='Enter Your Name'\r\n                      value={formik.values.name}\r\n                      onChange={formik.handleChange}\r\n                      onBlur={formik.handleBlur}\r\n                      aria-label='name-input'\r\n                    />\r\n                    {formik.touched.name && formik.errors.name && (\r\n                      <span className='text-danger'>{formik.errors.name}</span>\r\n                    )}\r\n                  </div>\r\n                  <div className='mb-3'>\r\n                    {/* emailaddress */}\r\n                    <label\r\n                      htmlFor='email'\r\n                      className='form-label'\r\n                      data-testid='emailLabel'\r\n                    >\r\n                      Email address\r\n                    </label>\r\n                    {/* must have a email address while form submission the data will be pass to db  */}\r\n                    <input\r\n                      type='email'\r\n                      className='form-control'\r\n                      id='email'\r\n                      aria-describedby='emailHelp'\r\n                      name='email'\r\n                      placeholder='Enter Your Email'\r\n                      value={formik.values.email}\r\n                      onChange={formik.handleChange}\r\n                      onBlur={formik.handleBlur}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email && (\r\n                      <span className='text-danger'>{formik.errors.email}</span>\r\n                    )}\r\n                    <div id='emailHelp' className='form-text'>\r\n                      Well never share your email with anyone else.\r\n                    </div>\r\n                  </div>\r\n                  <div className='mb-3'>\r\n                    {/* phone number */}\r\n                    <label\r\n                      htmlFor='phone'\r\n                      className='form-label'\r\n                      data-testid='phoneLabel'\r\n                    >\r\n                      Phone number\r\n                    </label>\r\n                    {/* must have a phone while form submission the data will be pass to db  */}\r\n                    <input\r\n                      type='number'\r\n                      className='form-control'\r\n                      name='phone'\r\n                      placeholder='Enter your phone number'\r\n                      id='phone'\r\n                      value={formik.values.phone}\r\n                      onChange={formik.handleChange}\r\n                      onBlur={formik.handleBlur}\r\n                    />\r\n                    {formik.touched.phone && formik.errors.phone && (\r\n                      <span className='text-danger'>{formik.errors.phone}</span>\r\n                    )}\r\n                  </div>\r\n                  {/* to collect the rating  */}\r\n                  <div className='mb-3'>\r\n                    {/* rating field */}\r\n                    <label\r\n                      htmlFor='rating'\r\n                      className='form-label'\r\n                      data-testid='ratingLabel'\r\n                    >\r\n                      Rating\r\n                    </label>\r\n                    <select\r\n                      className='form-select'\r\n                      id='rating'\r\n                      name='rating'\r\n                      aria-label='Default select example'\r\n                      value={formik.values.rating}\r\n                      onChange={formik.handleChange}\r\n                      onBlur={formik.handleBlur}\r\n                    >\r\n                      <option defaultValue='Give Your Rating Here'>\r\n                        Give Your Rating Here\r\n                      </option>\r\n                      {/* data in value will be pass to the db  */}\r\n                      <option value='Excellent'>Excellent</option>\r\n                      <option value='Good'>Good</option>\r\n                      <option value='Medium'>Medium</option>\r\n                      <option value='Poor'>Poor</option>\r\n                      <option value='Very Bad'>Very Bad</option>\r\n                    </select>\r\n                    {formik.touched.rating && formik.errors.rating && (\r\n                      <span className='text-danger'>{formik.errors.rating}</span>\r\n                    )}\r\n                  </div>\r\n                  <label htmlFor='messageArea'>Comments</label>\r\n                  {/* comment field  */}\r\n                  <textarea\r\n                    className='form-control'\r\n                    placeholder='Leave a comment here'\r\n                    id='messageArea'\r\n                    name='message'\r\n                    value={formik.values.message}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                  />\r\n                  {formik.touched.message && formik.errors.message && (\r\n                    <span className='text-danger'>{formik.errors.message}</span>\r\n                  )}\r\n                  <div className='pt-2'>\r\n                    {!isSaved && (\r\n                      <button\r\n                        type='submit'\r\n                        className='btn btn-primary'\r\n                        disabled={formik.values.name === ''}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    )}\r\n\r\n                    {isSaved && (\r\n                      <button type='submit' className='btn btn-info'>\r\n                        Uploading....\r\n                      </button>\r\n                    )}\r\n\r\n                    <div>\r\n                      {isPending ? (\r\n                        <div\r\n                          data-testid='isPending'\r\n                          className='alert alert-success mt-3'\r\n                        >\r\n                          Saved Successfully\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nReview.propTypes = {\r\n  product: Proptypes.object,\r\n  setProductDetail: Proptypes.func\r\n}\r\n// Export the Review component\r\nexport default Review;\r\n","// Importing React and necessary hooks from react library\r\nimport React from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\n// Creating a functional component named Comments\r\nconst Comments = ({ name, message, rating }) => {\r\n  // Returning JSX to render comments\r\n  return (\r\n    <div className='row mt-2' data-testid='comment'>\r\n      {/* Iterating through commentList and rendering each comment as a card */}\r\n      <div className='col-md-12 mt-3'>\r\n        <div className='card'>\r\n          <div className='card-body d-flex align-items-center'>\r\n            <img src='./assets/images/avatar.png' alt='profile picture' />\r\n            <div>\r\n              <h5 className='card-title mx-2'>{name}</h5>\r\n              <p className='card-text mx-2'>{message}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nComments.propTypes = {\r\n  name: Proptypes.string,\r\n  message: Proptypes.string,\r\n  rating: Proptypes.string\r\n}\r\n// Exporting Comments componen\r\nexport default Comments;\r\n","// Importing necessary modules from React and React-Router-DOM\r\nimport React, { useEffect, useState } from 'react';\r\nimport { NavLink, Outlet, useParams } from 'react-router-dom';\r\n\r\n// Importing custom component and utility function\r\nimport HelmetSetup from '../../../components/HelmetSetup/HelmetSetup';\r\nimport { fetchApi } from '../../../utils/fetchApi';\r\n\r\n// Importing child components\r\nimport Review from './Review/Review';\r\nimport Comments from './Comments/Comments';\r\n\r\n// Creating a functional component named ProductDetail\r\nconst ProductDetail = () => {\r\n  // Defining states for loading, error and product details\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isError, setIsError] = useState(false);\r\n  const [productDetail, setProductDetail] = useState([]);\r\n\r\n  // Getting the route parameters\r\n  const routeParams = useParams();\r\n  const { id } = routeParams;\r\n  // Creating URL to fetch data from\r\n  const url = `http://localhost:5000/products/${id}`;\r\n\r\n  // Defining an effect to fetch data from the API\r\n  useEffect(() => {\r\n    fetchApi(url)\r\n      .then((resInJson) => {\r\n        if (resInJson.status !== 404) {\r\n          setIsLoading(false);\r\n          setIsError(false);\r\n          setProductDetail(resInJson);\r\n        } else {\r\n          setIsLoading(false);\r\n          setIsError(true);\r\n          setProductDetail([]);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n        setProductDetail([]);\r\n      })\r\n      .finally(() => { })\r\n  }, [url]);\r\n\r\n  // Conditional rendering based on the state of loading and error\r\n  if (isLoading) {\r\n    return (\r\n      <div className='text-center'>\r\n        <div className='spinner-border text-danger'></div>\r\n      </div>\r\n    );\r\n  }\r\n  if (isError) {\r\n    return (\r\n      <div className='alert alert-danger'>\r\n        Sorry! Unable to fetch product detail page ! Try Again Later\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Rendering the component with product details\r\n  return (\r\n    <>\r\n      <HelmetSetup title='ProductDetail' />\r\n      <div className='row'>\r\n        {/* go back to products when you click the back button */}\r\n        <NavLink to='/products'>\r\n          <button type='button' className='btn btn-primary p-2 my-2'><i className='fas fa-arrow-left'>Back</i></button>\r\n        </NavLink>\r\n        <div className='col-md-5' key={productDetail.id}>\r\n          <div className='card md-3 shadow-sm border-removal'>\r\n            <img src={productDetail.imageUrl}\r\n              alt={productDetail.imgAltText}\r\n              className='card-img-top'\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='col-md-7'>\r\n          {/* Best Seller tag for each product */}\r\n          <h5 className='mb-0'><span className='badge text-bg-warning'>Best seller {'#' + productDetail.bestSellerRanking}</span></h5>\r\n          <p className='card-text m-0 fs-1'>{productDetail.name}</p>\r\n          <p className='pt-0 text-secondary'>{productDetail.description}</p>\r\n          <hr />\r\n          {/* description of the product */}\r\n          <div className='p-2 bd-highlight'>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. At ultrices mi tempus imperdiet\r\n            nulla malesuada pellentesque. Lacus sed viverra tellus in hac habitasse platea dictumst.\r\n            Massa ultricies mi quis hendrerit dolor magna eget est lorem. Malesuada bibendum arcu vitae\r\n            elementum curabitur vitae nunc. Mauris ultrices eros in cursus turpis massa tincidunt.\r\n            Integer enim neque volutpat ac tincidunt vitae. Dis parturient montes nascetur ridiculus\r\n            mus mauris vitae ultricies. Non blandit massa enim nec dui nunc mattis. Nulla at volutpat diam ut.\r\n            Placerat duis ultricies lacus sed turpis tincidunt id aliquet risus. Tincidunt arcu non sodales\r\n            neque sodales ut etiam. Vel pretium lectus quam id. Elementum tempus egestas sed sed risus\r\n            pretium quam vulputate dignissim. Metus dictum at tempor commodo ullamcorper\r\n            a lacus vestibulum. Dignissim suspendisse in est ante in. Arcu dui vivamus arcu felis bibendum.\r\n            Dolor morbi non arcu risus quis.\r\n          </div>\r\n          <div className='d-flex flex-row align-items-center bd-highlight md-3'>\r\n            <p className='p-2 bd-highlight fs-3'>{'Rs.' + productDetail.cost}</p>\r\n            <p className='p-2 bd-highlight text-secondary' style={{ textDecoration: 'line-through' }}>\r\n              {'Rs.' + productDetail.maxRetailPrice}</p>\r\n            <p className='p-2 bd-highlight text-danger'>({productDetail.discountApplicable + '%OFF'})</p>\r\n            <div className='text-end'>\r\n              <p className='p-2 bd-highlight'>Added On: {productDetail.added}</p>\r\n            </div>\r\n          </div>\r\n          <div className='d-flex justify-content-end align-self-center'>\r\n            {/* render the review page */}\r\n            <Review product={productDetail} setProductDetail={setProductDetail} />\r\n          </div>\r\n        </div>\r\n        {/* render the comments page */}\r\n        {/* <Comments product={productDetail} /> */}\r\n        {productDetail.reviews.map(\r\n          (review) => {\r\n            return <Comments key={review.id} {...review} />;\r\n          }\r\n        )}\r\n      </div>\r\n      <Outlet />\r\n    </>\r\n  )\r\n}\r\n\r\n// Export the ProductDetail component\r\nexport default ProductDetail;\r\n","// This function makes a GET request to the specified URL and returns a promise\r\nexport const fetchApi = (url) => {\r\n  return fetch(url)\r\n    .then((res) => {\r\n      // which resolves with the JSON response if successful, or with an error object\r\n      if (res.status === 200 || res.status === 201) {\r\n        return res.json()\r\n      } else {\r\n        return {\r\n          // containing the response status and an error message if unsuccessful.\r\n          status: res.status,\r\n          error: new Error('Invalid Response')\r\n        };\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      // It also logs the response or error to the console.\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      // console.log('It is over!');\r\n    });\r\n};\r\n"],"names":["_ref","title","_jsx","HelmetProvider","children","Helmet","product","setProductDetail","_useState","useState","_useState2","_slicedToArray","isSaved","setIsSaved","_useState3","_useState4","isPending","setIsPending","_useState5","_useState6","show","setShow","handleClose","onSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref2","resetForm","formData","updatedProduct","wrap","_context","prev","next","id","Math","floor","random","name","email","message","phone","rating","_objectSpread","reviews","concat","_toConsumableArray","axios","then","resInJson","status","alert","catch","err","console","log","stop","_x","_x2","apply","arguments","validationSchema","Yup","required","formik","useFormik","initialValues","_jsxs","_Fragment","Button","variant","onClick","Modal","size","centered","onHide","closeButton","className","handleSubmit","htmlFor","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","touched","errors","defaultValue","disabled","src","alt","isLoading","setIsLoading","isError","setIsError","productDetail","useParams","url","useEffect","fetchApi","finally","HelmetSetup","NavLink","to","imageUrl","imgAltText","bestSellerRanking","description","cost","style","textDecoration","maxRetailPrice","discountApplicable","added","Review","map","review","Comments","Outlet","fetch","res","json","error","Error"],"sourceRoot":""}